{"version":3,"sources":["services/photoService.js","cmps/PhotoDetails.jsx","cmps/PhotoStrip.jsx","cmps/GallerySection.jsx","pages/GalleryApp.jsx","App.js","reportWebVitals.js","index.js"],"names":["ENDPOINT","REACT_APP_FLICKR_API_KEY","process","METHOD","pageNum","a","console","log","axios","get","data","photoService","getRecentPhotos","PhotoDetails","photo","toggleDetails","className","onClick","src","server","id","secret","PhotoStrip","photos","isLast","elLastStrip","ref","map","idx","GallerySection","photosToShow","galleryStrip","i","length","push","splice","gsap","registerPlugin","ScrollTrigger","GalleryApp","useState","setPhotos","setPageNum","isLoading","setIsLoading","focusedPhoto","setFocusedPhoto","useEffect","getPhotos","onTriggerScroll","observer","useRef","useCallback","node","current","disconnect","IntersectionObserver","entries","isIntersecting","prev","rootMargin","observe","prevPhotos","concat","utils","toArray","forEach","section","index","w","querySelector","scrollWidth","offsetWidth","x","xEnd","fromTo","scrollTrigger","trigger","scrub","loading","App","component","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+PAEMA,EAAW,wCACTC,EAA6BC,mCAC/BC,EAAS,0B,4CAEf,WAA+BC,GAA/B,iBAAAC,EAAA,6DACEC,QAAQC,IAAI,eAAgBH,GAD9B,SAEyBI,IAAMC,IAAN,UAClBT,EADkB,mBACCG,EADD,gCAC+BF,EAD/B,8CAC6FG,EAD7F,iBAFzB,uBAEUM,EAFV,EAEUA,KAGRJ,QAAQC,IAAIG,GALd,kBAMSA,GANT,4C,sBASO,IAAMC,EAAe,CAC1BC,gB,oDCGaC,MAjBf,YAAiD,IAAzBC,EAAwB,EAAxBA,MAAOC,EAAiB,EAAjBA,cAE7B,OADAT,QAAQC,IAAI,CAAEO,UAEZ,sBACEE,UAAU,8BACVC,QAAS,WACPF,EAAc,OAHlB,UAME,qBAAKC,UAAU,QAAQC,QAAS,kBAAMF,EAAc,SACpD,qBACEG,IAAG,wCAAmCJ,EAAMK,OAAzC,YAAmDL,EAAMM,GAAzD,YAA+DN,EAAMO,OAArE,gB,wBCbJ,SAASC,EAAT,GAAqE,IAA/CC,EAA8C,EAA9CA,OAAQR,EAAsC,EAAtCA,cAAeS,EAAuB,EAAvBA,OAAQC,EAAe,EAAfA,YAC1D,OAAID,EAEA,yBAASE,IAAKD,EAAd,SACE,oBAAIT,UAAU,UAAd,SACGO,EAAOI,KAAI,SAACb,EAAOc,GAClB,OACE,oBAAcX,QAAS,kBAAMF,EAAcD,IAA3C,SACE,qBACEI,IAAG,wCAAmCJ,EAAMK,OAAzC,YAAmDL,EAAMM,GAAzD,YAA+DN,EAAMO,OAArE,aAFEO,UAYjB,kCACE,oBAAIZ,UAAU,UAAd,SACGO,EAAOI,KAAI,SAACb,EAAOc,GAClB,OACE,oBAAcX,QAAS,kBAAMF,EAAcD,IAA3C,SACE,qBACEI,IAAG,wCAAmCJ,EAAMK,OAAzC,YAAmDL,EAAMM,GAAzD,YAA+DN,EAAMO,OAArE,aAFEO,UCrBhB,SAASC,EAAT,GAAiE,IAAvCN,EAAsC,EAAtCA,OAAQR,EAA8B,EAA9BA,cAAeU,EAAe,EAAfA,YACtD,GAAKF,EAAL,CAGA,IAFA,IAAMO,EAAY,YAAOP,GACnBQ,EAAe,GACZC,EAAI,EAAGA,EAAIT,EAAOU,OAAS,EAAGD,IAAK,CAC1C,IAAMR,EAASQ,IAAMT,EAAOU,OAAS,EAAI,EACzCF,EAAaG,KACX,cAACZ,EAAD,CAEEG,YAAaA,EACbD,OAAQA,EACRT,cAAeA,EACfQ,OAAQO,EAAaK,OAAO,EAAG,IAJ1BH,IAQX,OAAO,8BAAMD,KCXfK,IAAKC,eAAeC,KAgGLC,MA9Ff,WAAuB,IAAD,EACQC,mBAAS,IADjB,mBACbjB,EADa,KACLkB,EADK,OAEUD,mBAAS,GAFnB,mBAEbpC,EAFa,KAEJsC,EAFI,OAGcF,oBAAS,GAHvB,mBAGbG,EAHa,KAGFC,EAHE,OAIoBJ,mBAAS,MAJ7B,mBAIbK,EAJa,KAICC,EAJD,KAMpBC,qBAAU,WACRC,MACC,IAEHD,qBAAU,WACRE,MACC,CAAC1B,IAEJ,IAAM2B,EAAWC,mBACX1B,EAAc2B,uBAClB,SAACC,GACKH,EAASI,SAASJ,EAASI,QAAQC,aACvCL,EAASI,QAAU,IAAIE,qBAAJ,uCACjB,WAAOC,GAAP,SAAApD,EAAA,0DAEMoD,EAAQ,GAAGC,eAFjB,gCAIUhB,GAAW,SAACiB,GAAD,OAAUA,EAAO,KAJtC,OAKIX,EAAU5C,GALd,2CADiB,sDASjB,CACEwD,WAAY,UAGZP,GAAMH,EAASI,QAAQO,QAAQR,KAErC,CAAC9B,IAGGyB,EAAS,uCAAG,8BAAA3C,EAAA,6DAChBuC,GAAa,GADG,SAESjC,EAAaC,gBAAgBR,GAFtC,iBAERmB,EAFQ,EAERA,SACIkB,GAAU,SAACqB,GAAD,OAAgBA,EAAWC,OAAOxC,EAAOT,UAC/D8B,GAAa,GAJG,2CAAH,qDAOT7B,EAAgB,SAACD,GACrBgC,EAAgBhC,IAGZmC,EAAkB,WACtBb,IAAK4B,MAAMC,QAAQ,WAAWC,SAAQ,SAACC,EAASC,GAC9C,IAAMC,EAAIF,EAAQG,cAAc,YADwB,EAGtDF,EAAQ,EACJ,CAAC,QAAiD,GAAxCC,EAAEE,YAAcJ,EAAQK,cAClC,EAAkB,EAAjBH,EAAEE,YAAkB,GAL6B,mBAEjDE,EAFiD,KAE9CC,EAF8C,KAMxDtC,IAAKuC,OACHN,EACA,CAAEI,KACF,CACEA,EAAGC,EACHE,cAAe,CACbC,QAASV,EACTW,MAAO,UAOjB,OAAI,OAACvD,QAAD,IAACA,OAAD,EAACA,EAAQU,QAQX,sBAAKjB,UAAU,cAAf,UACG6B,GACC,cAAC,EAAD,CAAc9B,cAAeA,EAAeD,MAAO+B,IAErD,wBAAQ7B,UAAU,qBAAlB,SACI,oBAAIA,UAAU,QAAd,qCAEJ,qBAAKA,UAAU,UAAf,SACE,cAACa,EAAD,CACEN,OAAQA,EACRE,YAAaA,EACbV,cAAeA,SAjBnB,qBAAKC,UAAU,iBAAf,SACE,cAAC,aAAD,CAAY+D,QAASpC,OCjEdqC,MAZf,WACE,OACE,cAAC,IAAD,UACE,sBAAMhE,UAAU,MAAhB,SACE,cAAC,IAAD,UACE,cAAC,IAAD,CAAOiE,UAAW1C,EAAY2C,KAAK,aCI9BC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,MCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACI,cAAC,EAAD,MAEJC,SAASC,eAAe,SAU1Bb,M","file":"static/js/main.e3fd0732.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\nconst ENDPOINT = \"https://api.flickr.com/services/rest/\";\r\nconst { REACT_APP_FLICKR_API_KEY } = process.env;\r\nconst METHOD = \"flickr.photos.getRecent\";\r\n\r\nasync function getRecentPhotos(pageNum) {\r\n  console.log(\"page number:\", pageNum);\r\n  const { data } = await axios.get(\r\n    `${ENDPOINT}?method=${METHOD}&extra=url_s&api_key=${REACT_APP_FLICKR_API_KEY}&format=json&nojsoncallback=1&page=${pageNum}&per_page=30`\r\n  );\r\n  console.log(data);\r\n  return data;\r\n}\r\n\r\nexport const photoService = {\r\n  getRecentPhotos,\r\n};\r\n","import React from \"react\";\r\n\r\nfunction PhotoDetails({ photo, toggleDetails }) {\r\n  console.log({ photo });\r\n  return (\r\n    <div\r\n      className=\"details-wrapper grid center\"\r\n      onClick={() => {\r\n        toggleDetails(null);\r\n      }}\r\n    >\r\n      <div className=\"arrow\" onClick={() => toggleDetails(null)}></div>\r\n      <img\r\n        src={`https://live.staticflickr.com/${photo.server}/${photo.id}_${photo.secret}_b.jpg`}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default PhotoDetails;\r\n","export function PhotoStrip({ photos, toggleDetails, isLast, elLastStrip }) {\r\n  if (isLast) {\r\n    return (\r\n      <section ref={elLastStrip}>\r\n        <ul className=\"wrapper\">\r\n          {photos.map((photo, idx) => {\r\n            return (\r\n              <li key={idx} onClick={() => toggleDetails(photo)}>\r\n                <img\r\n                  src={`https://live.staticflickr.com/${photo.server}/${photo.id}_${photo.secret}_b.jpg`}\r\n                />\r\n              </li>\r\n            );\r\n          })}\r\n        </ul>\r\n      </section>\r\n    );\r\n  } else {\r\n    return (\r\n      <section>\r\n        <ul className=\"wrapper\">\r\n          {photos.map((photo, idx) => {\r\n            return (\r\n              <li key={idx} onClick={() => toggleDetails(photo)}>\r\n                <img\r\n                  src={`https://live.staticflickr.com/${photo.server}/${photo.id}_${photo.secret}_b.jpg`}\r\n                />\r\n              </li>\r\n            );\r\n          })}\r\n        </ul>\r\n      </section>\r\n    );\r\n  }\r\n}\r\n","import { PhotoStrip } from \"./PhotoStrip\";\r\n\r\nexport function GallerySection({ photos, toggleDetails, elLastStrip }) {\r\n  if (!photos) return;\r\n  const photosToShow = [...photos];\r\n  const galleryStrip = [];\r\n  for (let i = 0; i < photos.length / 5; i++) {\r\n    const isLast = i === photos.length / 5 - 1;\r\n    galleryStrip.push(\r\n      <PhotoStrip\r\n        key={i}\r\n        elLastStrip={elLastStrip}\r\n        isLast={isLast}\r\n        toggleDetails={toggleDetails}\r\n        photos={photosToShow.splice(0, 4)}\r\n      />\r\n    );\r\n  }\r\n  return <div>{galleryStrip}</div>;\r\n}\r\n","import React, { useCallback, useEffect, useRef, useState } from \"react\";\r\nimport { MoonLoader } from \"react-spinners\";\r\nimport { photoService } from \"../services/photoService\";\r\nimport PhotoDetails from \"../cmps/PhotoDetails\";\r\nimport { gsap } from \"gsap\";\r\nimport { ScrollTrigger } from \"gsap/ScrollTrigger\";\r\nimport { GallerySection } from \"../cmps/GallerySection\";\r\ngsap.registerPlugin(ScrollTrigger);\r\n\r\nfunction GalleryApp() {\r\n  const [photos, setPhotos] = useState([]);\r\n  const [pageNum, setPageNum] = useState(1);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [focusedPhoto, setFocusedPhoto] = useState(null);\r\n\r\n  useEffect(() => {\r\n    getPhotos();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    onTriggerScroll(); //adding the new sections to the gsap listner\r\n  }, [photos]);\r\n\r\n  const observer = useRef();\r\n  const elLastStrip = useCallback(\r\n    (node) => {\r\n      if (observer.current) observer.current.disconnect(); //if we have an observer we destroy it because we dont need it anymore.\r\n      observer.current = new IntersectionObserver(\r\n        async (entries) => {\r\n          //creating a new listner\r\n          if (entries[0].isIntersecting) {\r\n            //if the element is in the viewport:\r\n            await setPageNum((prev) => prev + 1);\r\n            getPhotos(pageNum);\r\n          }\r\n        },\r\n        {\r\n          rootMargin: \"500px\", //isIntersectin is when the element is 500px away from the viewport\r\n        }\r\n      );\r\n      if (node) observer.current.observe(node);\r\n    },\r\n    [photos]\r\n  );\r\n\r\n  const getPhotos = async () => {\r\n    setIsLoading(true);\r\n    const { photos } = await photoService.getRecentPhotos(pageNum);\r\n    if (photos) setPhotos((prevPhotos) => prevPhotos.concat(photos.photo));\r\n    setIsLoading(false);\r\n  };\r\n\r\n  const toggleDetails = (photo) => {\r\n    setFocusedPhoto(photo);\r\n  };\r\n\r\n  const onTriggerScroll = () => {\r\n    gsap.utils.toArray(\"section\").forEach((section, index) => {\r\n      const w = section.querySelector(\".wrapper\");\r\n      const [x, xEnd] =\r\n        index % 2\r\n          ? [\"100%\", (w.scrollWidth - section.offsetWidth) * -1]\r\n          : [w.scrollWidth * -1, 0];\r\n      gsap.fromTo(\r\n        w,\r\n        { x },\r\n        {\r\n          x: xEnd,\r\n          scrollTrigger: {\r\n            trigger: section,\r\n            scrub: 0.3,\r\n          },\r\n        }\r\n      );\r\n    });\r\n  };\r\n\r\n  if (!photos?.length)\r\n    return (\r\n      <div className=\"loader-wrapper\">\r\n        <MoonLoader loading={isLoading} />\r\n      </div>\r\n    );\r\n\r\n  return (\r\n    <div className=\"gallery-app\">\r\n      {focusedPhoto && (\r\n        <PhotoDetails toggleDetails={toggleDetails} photo={focusedPhoto} />\r\n      )}\r\n      <header className=\"header grid center\">\r\n          <h1 className=\"title\">Welcome to my gallery</h1>\r\n      </header>\r\n      <div className=\"gallery\">\r\n        <GallerySection\r\n          photos={photos}\r\n          elLastStrip={elLastStrip}\r\n          toggleDetails={toggleDetails}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default GalleryApp;\r\n","import React from 'react';\nimport { Switch, BrowserRouter as Router, Route } from 'react-router-dom'\nimport GalleryApp from './pages/GalleryApp';\nfunction App() {\n  return (\n    <Router>\n      <main className=\"App\">\n        <Switch>\n          <Route component={GalleryApp} path=\"/\" />\n        </Switch>\n      </main>\n    </Router>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport \"./assets/styles/styles.scss\";\n\nReactDOM.render(\n  <React.StrictMode>\n      <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}